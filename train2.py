#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import unicode_literals, print_function, division
from io import open
import os
from datetime import datetime
import unicodedata
import string
import re
import random
import time
import math
import torch
import torch.nn as nn
from torch import optim
import torch.nn.functional as F
import matplotlib.pyplot as plt

plt.switch_backend('agg')
import matplotlib.ticker as ticker
import numpy as np
from os import system
from nltk.translate.bleu_score import SmoothingFunction, sentence_bleu
from datasets import VocabTenseDataset
from models import CVAE, EncoderRNN, DecoderRNN


"""========================================================================================
The sample.py includes the following template functions:

1. Encoder, decoder
2. Training function
3. BLEU-4 score function
4. Gaussian score function

You have to modify them to complete the lab.
In addition, there are still other functions that you have to 
implement by yourself.

1. The reparameterization trick
2. Your own dataloader (design in your own way, not necessary Pytorch Dataloader)
3. Output your results (BLEU-4 score, conversion words, Gaussian score, generation words)
4. Plot loss/score
5. Load/save weights

There are some useful tips listed in the lab assignment.
You should check them before starting your lab.
========================================================================================"""

torch.autograd.set_detect_anomaly(True)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
SOS_token = 0
EOS_token = 1
# ----------Hyper Parameters----------#
hidden_size = 256
latent_size = 32
# The number of vocabulary
vocab_size = 28
# The number of condition
condition_size = 4
condition_embedding_size = 8

n_iters = 300000
print_every = 30
plot_every = 100
save_every = 10000

adjust_iter_teacher_forcing = 75000
teacher_forcing_ratio = 1.0
lowest_teacher_forcing_ratio = 0.7
diff_teacher_forcing = (teacher_forcing_ratio - lowest_teacher_forcing_ratio) / (n_iters - adjust_iter_teacher_forcing)

empty_input_ratio = 0.1


KLD_weight = 0.0
highest_KLD_weight = 0.5
adjust_iter_KLD_weight = 10000
diff_KLD_weight = (highest_KLD_weight - KLD_weight) / (n_iters - adjust_iter_KLD_weight)

LR = 0.05
MAX_LENGTH = 30

time_now = datetime.now().strftime("%Y-%m-%d-%H%M%S")
words_list = []

################################
# Example inputs of compute_bleu
################################
# The target word
reference = 'accessed'
# The word generated by your model
output = 'access'


# compute BLEU-4 score
def compute_bleu(output, reference):
    cc = SmoothingFunction()
    if len(reference) == 3:
        weights = (0.33, 0.33, 0.33)
    else:
        weights = (0.25, 0.25, 0.25, 0.25)
    return sentence_bleu([reference], output, weights=weights, smoothing_function=cc.method1)


"""============================================================================
example input of Gaussian_score

words = [['consult', 'consults', 'consulting', 'consulted'],
['plead', 'pleads', 'pleading', 'pleaded'],
['explain', 'explains', 'explaining', 'explained'],
['amuse', 'amuses', 'amusing', 'amused'], ....]

the order should be : simple present, third person, present progressive, past
============================================================================"""
def load_words_list(path=os.path.join("lab4_dataset", "train.txt")):
    with open(path, 'r') as fp:
        for line in fp:
            word = line.split(' ')
            word[3] = word[3].strip('\n')
            words_list.extend([word])
    return words_list


def Gaussian_score(words):
    global words_list
    if not words_list:
        words_list = load_words_list(os.path.join("lab4_dataset", "train.txt"))

    score = 0
    for t in words:
        for i in words_list:
            if t == i:
                score += 1
    return score / len(words)


def show_plot(results_dct, title):
    fig, ax = plt.subplots()
    # ax.set_position([0, 0, 0.8, 1])
    ax2 = ax.twinx()
    plt.title(title)

    for kpi, values in results_dct.items():
        if not values:
            continue

        if kpi.startswith("loss"):
            ax.plot(values, "-", label=kpi)
        elif kpi.startswith("score_"):
            ax2.plot(values, "o", label=kpi)
        elif kpi.startswith("weight_"):
            ax2.plot(values, "--", label=kpi)
        else:
            pass

    figs = [i.get_legend_handles_labels() for i in (ax, ax2)]
    ax.legend(figs[0][0] + figs[1][0], figs[0][1] + figs[1][1], loc=6)
    # ax.legend(figs[0][0] + figs[1][0], figs[0][1] + figs[1][1], bbox_to_anchor=(1.02, 0.8), loc='center left')
    ax.set_xlabel('{} iterations'.format(plot_every))
    plt.savefig(os.path.join("results", time_now+"_"+title) + '.png')
    plt.clf()


def train(model, input_tensor, target_tensor):
    model.train()

    output, cross_entropy_loss, kl_divergences = model(input_tensor, target_tensor)

    h_kl_divergence, c_kl_divergence = kl_divergences
    h_loss = cross_entropy_loss + h_kl_divergence * KLD_weight
    h_loss.backward()

    return output, h_loss, cross_entropy_loss, kl_divergences


def test(model, input_tensor, target_tensor):
    model.eval()
    with torch.no_grad():
        output, cross_entropy_loss, kl_divergences = model(input_tensor, target_tensor)

    h_kl_divergence, c_kl_divergence = kl_divergences
    h_loss = cross_entropy_loss + h_kl_divergence * KLD_weight

    return output, h_loss, cross_entropy_loss, kl_divergences


def asMinutes(s):
    m = math.floor(s / 60)
    s -= m * 60
    return '%dm %ds' % (m, s)


def timeSince(since, percent):
    now = time.time()
    s = now - since
    es = s / (percent)
    rs = es - s
    return '%s (- %s)' % (asMinutes(s), asMinutes(rs))


def trainIters(model, n_iters,
               print_every=1000, plot_every=100, save_every=2000, learning_rate=0.01):
    start = time.time()

    results_dct = {
        "loss": [],
        "loss_ce": [],
        "loss_kld": [],
        "score_bleu4": [],
        "score_gaussian": [],
        "weight_teacher_forcing": [],
        "weight_KLD": [],
    }
    print_loss_total = 0  # Reset every print_every
    plot_loss_total = 0  # Reset every plot_every
    print_cross_entropy_loss_total = 0
    plot_cross_entropy_loss_total = 0
    print_kl_loss_total = 0
    plot_kl_loss_total = 0
    print_bleu_total = 0
    plot_bleu_total = 0
    print_gaussian_total = 0
    plot_gaussian_total = 0
    plot_test_total = 0

    optimizer = optim.SGD(model.parameters(), lr=learning_rate)

    dataset = VocabTenseDataset(os.path.join("lab4_dataset", "train.txt"), device=device, SOS=SOS_token, EOS=EOS_token)
    pairs = dataset.embedded_pairs
    training_pairs = [random.choice(pairs) for i in range(n_iters)]

    for iter in range(1, n_iters + 1):

        training_pair = training_pairs[iter - 1]
        input_tensor = training_pair[0]
        target_tensor = training_pair[1]

        optimizer.zero_grad()
        output, loss, cross_entropy_loss, (kl_loss, c_kl_loss) = train(model=model,
                                                                       input_tensor=input_tensor,
                                                                       target_tensor=target_tensor)
        optimizer.step()

        print_loss_total += loss
        plot_loss_total += loss
        print_cross_entropy_loss_total += cross_entropy_loss
        plot_cross_entropy_loss_total += cross_entropy_loss
        print_kl_loss_total += kl_loss
        plot_kl_loss_total += kl_loss

        input_vocab = dataset.to_vocab(input_tensor.vocab)
        target_vocab = dataset.to_vocab(target_tensor.vocab)
        output_vocab = dataset.to_vocab(output)
        bleu_score = compute_bleu(output_vocab, target_vocab)
        print_bleu_total += bleu_score
        plot_bleu_total += bleu_score
        gaussian_score = Gaussian_score(output_vocab)
        print_gaussian_total += gaussian_score


        if iter % print_every == 0:
            print_loss_avg = print_loss_total / print_every
            print_loss_total = 0
            print_cross_entropy_loss_avg = print_cross_entropy_loss_total / print_every
            print_cross_entropy_loss_total = 0
            print_kl_loss_avg = print_kl_loss_total / print_every
            print_kl_loss_total = 0
            print_bleu_avg = print_bleu_total / print_every
            print_bleu_total = 0

            print("Input: {}\toutput:{}\ttarget:{}".format(input_vocab, output_vocab, target_vocab))
            print('%s (%d %d%%) Loss=%.4f, BLEU-4=%.4f' % (timeSince(start, iter / n_iters),
                                                           iter, iter / n_iters * 100, print_loss_avg, print_bleu_avg))

        if iter % plot_every == 0:

            plot_loss_avg = plot_loss_total / plot_every
            results_dct["loss"].append(plot_loss_avg)
            plot_loss_total = 0

            plot_cross_entropy_loss_avg = plot_cross_entropy_loss_total / plot_every
            results_dct["loss_ce"].append(plot_cross_entropy_loss_avg)
            plot_cross_entropy_loss_total = 0

            plot_kl_loss_avg = plot_kl_loss_total / plot_every
            results_dct["loss_kld"].append(plot_kl_loss_avg)
            plot_kl_loss_total = 0

            plot_bleu_avg = plot_bleu_total / plot_every
            results_dct["score_bleu4"].append(plot_bleu_avg)
            plot_bleu_total = 0

            results_dct["weight_teacher_forcing"].append(teacher_forcing_ratio)
            results_dct["weight_KLD"].append(KLD_weight)

            show_plot(results_dct, title="Training KPI trends")

        if iter % save_every == 0:
            torch.save({
                "model": model.state_dict(),
                "teacher_forcing_ratio": teacher_forcing_ratio,
                "KLD_weight": KLD_weight,
            }, 'results/{}-Model-{}.ckpt'.format(time_now, iter))

        # adjust_teacher_forcing(iter)
        # adjust_kld_weight(iter)


if __name__ == "__main__":
    cvae = CVAE(vocab_size, latent_size, hidden_size, condition_size, condition_embedding_size,
                teacher_forcing_ratio=teacher_forcing_ratio,
                SOS=SOS_token, EOS=EOS_token).to(device)

    trainIters(cvae, 75000, print_every=10)
